/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc.team5535.robot;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
//import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.IterativeRobot;
//import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.XboxController;
//import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends IterativeRobot {
	private static final String kDefaultAuto = "Default";
	private static final String kCustomAuto = "My Auto";
	private String m_autoSelected;
	private SendableChooser<String> m_chooser = new SendableChooser<>();
	
	//drive stuff
	WPI_TalonSRX frontLeft, rearLeft, frontRight, rearRight;
	SpeedControllerGroup left, right;
	DifferentialDrive drive;
	
	//elevator
	//WPI_VictorSPX elevator1, elevator2, elevator3;
	
	//pneumatics
	DoubleSolenoid double1;
	Compressor comp = new Compressor(0);
	
	//gyro
	AHRS navx;
	
	//timer
	Timer timer;
	
	//driver
	XboxController xbox;
	
	/*
	//co-driver stuff
	Joystick panel;
	JoystickButton high, medium, low, align, stopalign;
	*/
	
	//objects for gearswitch
	Object forward, reverse;
	
	//limelight
	NetworkTable table;

	
	
	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		m_chooser.addDefault("Default Auto", kDefaultAuto);
		m_chooser.addObject("My Auto", kCustomAuto);
		SmartDashboard.putData("Auto choices", m_chooser);
				
		//drive stuff
		frontLeft = new WPI_TalonSRX(1);
		rearLeft = new WPI_TalonSRX(2);
		left = new SpeedControllerGroup(frontLeft, rearLeft);
		frontRight = new WPI_TalonSRX(3);
		rearRight = new WPI_TalonSRX(4);
		right = new SpeedControllerGroup(frontRight, rearRight);
		drive = new DifferentialDrive(left, right);
		
		//navX
		navx = new AHRS(SerialPort.Port.kUSB);
		
		//compressor
		comp.setClosedLoopControl(false);
		
		//timer
		timer = new Timer();
		
		/*
		//elevator
		elevator1 = new WPI_VictorSPX(5);
		elevator2 = new WPI_VictorSPX(6);
		elevator3 = new WPI_VictorSPX(7);
		 */
		
		//driver
		xbox = new XboxController(0);
		
		
		/*
		//co-driver
		panel = new Joystick(1);
		high = new JoystickButton(panel, 0);
		medium = new JoystickButton(panel, 1);
		low = new JoystickButton(panel, 2);
		align = new JoystickButton(panel, 3);
		stopalign = new JoystickButton(panel, 4);
		*/
		
		//solenoids
		double1 = new DoubleSolenoid(0, 1);
		
		
		//limelight
		NetworkTableInstance.getDefault().getTable("limelight").getEntry("<variablename>").getDouble(0);

		NetworkTableInstance.getDefault().getTable("limelight").getEntry("ledMode").setNumber(3);
		
		NetworkTableInstance.getDefault().getTable("limelight").getEntry("ledMode").setNumber(0);
		
		
	}
	
	public void calibrateNavX()
	{	
		System.out.println("Calibrating NavX...");


		while(navx.isCalibrating())
		{
			Timer.delay(0.005);
		}
		System.out.println("Calibration done.");
	}


	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * <p>You can add additional auto modes by adding additional comparisons to
	 * the switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	
	@Override
	public void autonomousInit() {
		m_autoSelected = m_chooser.getSelected();
		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + m_autoSelected);
	}

	/**
	 * This function is called periodically during autonomous.
	 */
	@Override
	public void autonomousPeriodic() {
		switch (m_autoSelected) {
			case kCustomAuto:
				// Put custom auto code here
				break;
			case kDefaultAuto:
			default:
				// Put default auto code here
				break;
		}
	}

	/**
	 * This function is called periodically during operator control.
	 */
	@Override
	public void teleopInit() {
		double1.equals(forward);
		comp.setClosedLoopControl(true);
	}
	
	@Override
	public void teleopPeriodic() {
		drive.tankDrive(-xbox.getRawAxis(1), -xbox.getRawAxis(5));

	
	
		if(xbox.getBumper(GenericHID.Hand.kRight)) {
			double1.set(DoubleSolenoid.Value.kForward);
		}
		
		else if(xbox.getBumper(GenericHID.Hand.kLeft)) {
			double1.set(DoubleSolenoid.Value.kReverse);
		}
		
		
		
		
		
	}

	/**
	 * This function is called periodically during test mode.
	 */
	@Override
	public void testPeriodic() {
	}
}
